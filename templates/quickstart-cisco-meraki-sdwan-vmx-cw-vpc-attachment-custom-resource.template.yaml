AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: "This stack creates a custom resource lambda that sends an additional region network create event to eventsbridge.(qs-1srtkbc3l)\n"
Parameters:
  GlobalNetworkName:
    Description: AWS CloudWAN Global Network Name
    Default: meraki-gn
    Type: String
  MerakiEventBusName:
    Description: Name of CustomEventBus for EventBridge
    Default: MerakiEventBus
    Type: String
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
  AvailabilityZone1SubnetID:
    Description: Subnet ID to be used for the deployment of vMX-1 in Availability Zone 1
    Type: AWS::EC2::Subnet::Id
  AvailabilityZone2SubnetID:
    Description: Subnet ID to be used for the deployment of vMX-2 in Availability Zone 2
    Type: AWS::EC2::Subnet::Id
  BaseRegionName:
    Description: Base Region Name
    Type: String
Resources:
  StateMachineWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle:
        Ref: StateMachineWaitHandle
      Timeout: 7200
      Count: 1
  StateMachineWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  VpcAttachmentCustomResource:
    Type: Custom::VpcAttachmentLambda
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - VpcAttachmentCustomResourceLambda
          - Arn
      WaitHandle:
        Ref: StateMachineWaitHandle
      EventBusName:
        Ref: MerakiEventBusName
      Az1SubnetArn:
        Fn::Sub:
          - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${AZ1SubnetID}
          - AZ1SubnetID:
              Ref: AvailabilityZone1SubnetID
      Az2SubnetArn:
        Fn::Sub:
          - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${AZ2SubnetID}
          - AZ2SubnetID:
              Ref: AvailabilityZone2SubnetID
      VPCId:
        Ref: VPCID
      VPCArn:
        Fn::Sub:
          - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VPC_ID}
          - VPC_ID:
              Ref: VPCID
      GlobalNetworkName:
        Ref: GlobalNetworkName
      BaseRegionName:
        Ref: BaseRegionName
  VpcAttachmentCustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda for VpcAttachmentCustomResource
      Handler: index.handler
      Runtime: python3.8
      Role:
        Fn::GetAtt:
          - VpcAttachmentCustomResourceLambdaRole
          - Arn
      Timeout: 300
      Code:
        ZipFile:
          Fn::Sub: "import boto3\nimport json\nimport cfnresponse\nimport os\nfrom botocore.vendored import requests\n\nregion = os.environ['AWS_REGION']\n \n\n\ndef handler(event, context):\n  print('Received\
            \ event: %s' % json.dumps(event))\n  status = cfnresponse.SUCCESS\n  responseData = {}\n  \n  EventBusName = event['ResourceProperties']['EventBusName']\n  vpc_arn = event['ResourceProperties']['VPCArn']\n\
            \  az1_subnet_arns = event['ResourceProperties']['Az1SubnetArn']\n  az2_subnet_arns = event['ResourceProperties']['Az2SubnetArn']\n  subnet_arns = [az1_subnet_arns, az2_subnet_arns]\n  global_network_name\
            \ = event['ResourceProperties']['GlobalNetworkName']\n  base_region_name = event['ResourceProperties']['BaseRegionName']\n\n  aws_client = boto3.client('events', region_name=base_region_name)\n\
            \  \n  try:\n    if event['RequestType'] == 'Create':\n      response = aws_client.put_events(\n          Entries=[\n          {\n              'Source': 'com.aws.merakicloudwanquickstart',\n\
            \              'DetailType': 'new meraki additional region requested',\n              'Detail': json.dumps({\"network_name\": global_network_name, \"region\": region, \"VpcArn\": vpc_arn, \"\
            SubnetArns\": subnet_arns, \"WaitHandle\": event['ResourceProperties']['WaitHandle']}),\n              'EventBusName': EventBusName\n          }\n          ]\n      )\n      print(response)\n\
            \      responseData = response     \n    elif event['RequestType'] == 'Delete':\n      print('Stack Deletion.  All Cloud WAN resources are cleaned up by a separate State Machine')   \n  except\
            \ Exception as e:\n    print(e)\n    status = cfnresponse.FAILED\n  finally:\n    cfnresponse.send(event, context, status, responseData)\n"
  VpcAttachmentCustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyActionWildcard
          ignore_reasons:
            - EIAMPolicyActionWildcard: Intent assumed for initial migration.
Outputs: {}
